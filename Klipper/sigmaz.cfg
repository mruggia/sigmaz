# This file contains common pin mappings for the BIGTREETECH Manta M8P V2.0
# To use this config, the firmware should be compiled for the
# STM32H723 with a "128KiB bootloader" "25 MHz crystal"
# and "USB (on PA11/PA12)", "CAN bus (on PD0/PD1)" or Serial (on USART1 PA10/PA9).

# WIDTH     = 513.8  (distance between extruders when homed)
# HEIGHT    = 243    (height of printbed)
# SAFE_DIST = 58     (safe distance between extruders)

# BED_WIDTH   = WIDTH - 2*SAFE_DIST = 397.8
# BED_HEIGHT  = HEIGHT              = 243
# CENTER_X    = WIDTH/2 - SAFE_DIST = 198.9
# CENTER_Y    = HEIGHT/2            = 121.5
# T0_MIN_X    = -SAFE_DIST          = -58
# T0_MAX_X    = WIDTH - 2*SAFE_DIST = 397.8
# T1_MIN_X    = 0                   = 0
# T1_MAX_X    = WIDTH - SAFE_DIST   = 455.8

########################################

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_28002C000751313339373836-if00
[mcu EBB]
serial: /dev/serial/by-id/usb-Klipper_rp2040_504450612098D71C-if00
[mcu EBB1]
serial: /dev/serial/by-id/usb-Klipper_rp2040_50445061306EB61C-if00

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 6
max_z_accel: 60

[input_shaper]
shaper_freq_x: 35.8
shaper_type_x: mzv
shaper_freq_y: 28.2
shaper_type_y: mzv

[force_move]
[pause_resume]
[gcode_arcs]
[respond]
[exclude_object]

########################################
# MOTORS 

# Motor1
[stepper_x]
step_pin: PE6
dir_pin: PE5
enable_pin: !PC14
microsteps: 16
rotation_distance: 40
position_min: -58.1     # T0_MIN_X - 0.1
position_max: 397.9     # T0_MAX_X + 0.1
endstop_pin: ^!PF4
position_endstop: -58   # T0_MIN
homing_speed: 100
second_homing_speed: 6
homing_retract_dist: 2
[tmc2209 stepper_x]
uart_pin: PC13
run_current: 1.200
hold_current: 0.200
stealthchop_threshold: 999999

# Motor2
[dual_carriage]
axis: x
step_pin: PE2
dir_pin: PE1
enable_pin: !PE4
microsteps: 16
rotation_distance: 40
position_min: -0.1      # T1_MIN_X - 0.1
position_max: 455.9     # T1_MAX_X + 0.1
endstop_pin: ^!PF3
position_endstop: 455.8 # T1_MAX
homing_speed: 100
second_homing_speed: 6
homing_retract_dist: 2
[tmc2209 dual_carriage]
uart_pin: PE3
run_current: 1.200
hold_current: 0.200
stealthchop_threshold: 999999

# Motor3
[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PE0
microsteps: 16
rotation_distance: 40
position_min: -0.1     # Y_MIN_X - 0.1 = -0.1
position_max: 243.1    # Y_MAX_X + 0.1 = BED_HEIGHT + 0.1
endstop_pin: ^!PF2
position_endstop: 243  # Y_MAX_X = BED_HEIGHT
homing_speed: 100
second_homing_speed: 6
homing_retract_dist: 2
[tmc2209 stepper_y]
uart_pin: PB9
run_current: 1.800
hold_current: 0.200
stealthchop_threshold: 999999

## Motor4
[stepper_z]
step_pin: PB4
dir_pin: !PB3
enable_pin: !PB6
microsteps: 16
rotation_distance: 2
endstop_pin: probe:z_virtual_endstop
position_min: -2.0
position_max: 215
homing_speed: 6
second_homing_speed: 6
homing_retract_dist: 0
[tmc2209 stepper_z]
uart_pin: PB5
run_current: 0.600
stealthchop_threshold: 999999

########################################
# EXTRUDERS / HEATER BED

# Extruder 0
[extruder]
step_pin: EBB:gpio18
dir_pin: EBB:gpio19
enable_pin: !EBB:gpio17
microsteps: 16
rotation_distance: 3.6
pressure_advance: 0.06
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_cross_section: 4
heater_pin: EBB:gpio7
pullup_resistor: 2200
sensor_type: EPCOS 100K B57560G104F
sensor_pin: EBB:gpio26
control: pid
pid_Kp: 30.0
pid_Ki: 1.20
pid_Kd: 40.0
min_temp: 0
max_temp: 320
[tmc2209 extruder]
uart_pin: EBB:gpio20
run_current: 0.650
stealthchop_threshold: 999999
[heater_fan extruder_fan]
pin: EBB:gpio14
heater: extruder
heater_temp: 50.0
[lis2dw]
cs_pin: EBB:gpio1
spi_bus: spi0a
axes_map: z,x,y
[resonance_tester]
probe_points: 198.9, 121.5, 20 # CENTER_X, CENTER_Y, Z20
accel_chip: lis2dw

# Extruder 1
[extruder1]
step_pin: EBB1:gpio18
dir_pin: EBB1:gpio19
enable_pin: !EBB1:gpio17
microsteps: 16
rotation_distance: 3.6
pressure_advance: 0.06
nozzle_diameter: 0.400
filament_diameter: 1.750
max_extrude_cross_section: 4
heater_pin: EBB1:gpio7
pullup_resistor: 2200
sensor_type: EPCOS 100K B57560G104F
sensor_pin: EBB1:gpio26
control: pid
pid_Kp: 30.0
pid_Ki: 1.20
pid_Kd: 40.0
min_temp: 0
max_temp: 320
[tmc2209 extruder1]
uart_pin: EBB1:gpio20
run_current: 0.650
stealthchop_threshold: 999999
[heater_fan extruder1_fan]
pin: EBB1:gpio14
heater: extruder1
heater_temp: 50.0
#[lis2dw]
#cs_pin: EBB1:gpio1
#spi_bus: spi0a
#axes_map: z,x,y
#[resonance_tester]
#probe_points: 198.9, 121.5, 20 # CENTER_X, CENTER_Y, Z20
#accel_chip: lis2dw

# heater bed
[heater_bed]
heater_pin: PF5
sensor_pin: PB1 
sensor_type: ATC Semitec 104GT-2
control: pid
pid_Kp: 200
pid_Ki: 0.6
pid_Kd: 600
min_temp: 0
max_temp: 120


########################################
# MISCELLANEOUS 

# Part cooling fans
[multi_pin multi_fan]
pins: EBB:gpio4, EBB1:gpio4
[fan]
pin: multi_pin:multi_fan

# stepper driver fans
[controller_fan controller_fan]
pin: PF7

# airfilter
[output_pin air_filter]
pin: PF9
pwm: True
cycle_time: 0.010
value: 1

# LEDs
[multi_pin multi_led]
pins: PF6, PF8, EBB:gpio15, EBB1:gpio15
[output_pin led]
pin: multi_pin:multi_led
pwm: True
cycle_time: 0.010
value: 1

# chamber temperature sensors
[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PB0


########################################
# PROBING / HOMING / LEVELING

# Probe
[probe]
pin: ^!EBB:gpio13
x_offset: 0
y_offset: 0
z_offset: 0
speed: 6
samples_tolerance: 0.02
sample_retract_dist: 2
samples: 2
samples_tolerance_retries: 20
activate_gcode: 
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.3
    G4 P250
deactivate_gcode:
    {% set run_current = printer.configfile.config['tmc2209 stepper_z'].run_current | float %}
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={run_current}

# normal z home safe location
[safe_z_home]
home_xy_position: 198.9, 121.5 # CENTER_X, CENTER_Y
speed: 300
z_hop: 2
z_hop_speed: 6

# repeating z home (https://github.com/matthewlloyd/Klipper-Stable-Z-Home/tree/main)
[stable_z_home]
gcode: 
retries: 20
retry_tolerance: 0.02
window: 3

# bed mesh leveling
[bed_mesh]
algorithm: bicubic
speed: 300
horizontal_move_z: 2
mesh_min: 0, 0
mesh_max: 397.8, 243 # BED_WIDTH, BED_HEIGHT
probe_count: 17, 11


########################################
# FILAMENT RUNOUT

[filament_switch_sensor switch_sensor]
switch_pin: ^PD12
pause_on_runout: False
runout_gcode:
  FILAMENT_RUNOUT T=0 D=800
insert_gcode:
  FILAMENT_INSERTED T=0
[filament_switch_sensor switch_sensor1]
switch_pin: ^PF10
pause_on_runout: False
runout_gcode:
  FILAMENT_RUNOUT T=1 D=800
insert_gcode:
  FILAMENT_INSERTED T=1
[filament_motion_sensor encoder_sensor]
switch_pin: ^!PD13
detection_length: 20
extruder: extruder
pause_on_runout: False
runout_gcode:
  {% if printer["filament_switch_sensor switch_sensor"].filament_detected == true %}
    RESPOND TYPE=error MSG='jammed filament left!'
    PAUSE
  {% endif %}
[filament_motion_sensor encoder_sensor1]
switch_pin: ^!PC0
detection_length: 20
extruder: extruder1
pause_on_runout: False
runout_gcode:
  {% if printer["filament_switch_sensor switch_sensor1"].filament_detected == true %}
    RESPOND TYPE=error MSG='jammed filament right!'
    PAUSE
  {% endif %}

[gcode_macro FILAMENT_RUNOUT]
variable_t0_runout: 1.0e9 # filament_used length at which to pause T0
variable_t1_runout: 1.0e9 # filamnet_used length at which to pause T1
gcode:
  {% set d_now = printer.print_stats.filament_used|float %}
  {% set d_end = (d_now + params.D|float)|float %}
  {% if printer.toolhead.extruder == 'extruder' and params.T|int == 0 %}
    RESPOND TYPE=echo MSG='filament runout left'
    SET_GCODE_VARIABLE MACRO=FILAMENT_RUNOUT VARIABLE=t0_runout VALUE={d_end}
  {% elif printer.toolhead.extruder == 'extruder1' and params.T|int == 1 %}
    RESPOND TYPE=echo MSG='filament runout right'
    SET_GCODE_VARIABLE MACRO=FILAMENT_RUNOUT VARIABLE=t1_runout VALUE={d_end}
  {% else %}
    RESPOND TYPE=error MSG='filament runout of inactive extruder!'
    PAUSE
  {% endif %}

[gcode_macro FILAMENT_INSERTED]
gcode:
  {% if params.T|int == 0 %}
    RESPOND TYPE=echo MSG='filament inserted left'
    SET_GCODE_VARIABLE MACRO=FILAMENT_RUNOUT VARIABLE=t0_runout VALUE=1.0e9
  {% elif params.T|int == 1 %}
    RESPOND TYPE=echo MSG='filament inserted right'
    SET_GCODE_VARIABLE MACRO=FILAMENT_RUNOUT VARIABLE=t1_runout VALUE=1.0e9
  {% endif %}

[delayed_gcode FILAMENT_WATCHDOG]
initial_duration: 0.5
gcode:
  {% if printer.pause_resume.is_paused == false %}
    {% if printer.toolhead.extruder == 'extruder' and printer["filament_switch_sensor switch_sensor"].filament_detected == false %}
      {% if printer.print_stats.filament_used|float > printer["gcode_macro FILAMENT_RUNOUT"].t0_runout|float %}
        RESPOND TYPE=error MSG='replace filament left!'
        PAUSE
      {% endif %}
    {% elif printer.toolhead.extruder == 'extruder1' and printer["filament_switch_sensor switch_sensor1"].filament_detected == false %}
      {% if printer.print_stats.filament_used|float > printer["gcode_macro FILAMENT_RUNOUT"].t1_runout|float %}
        RESPOND TYPE=error MSG='replace filament right!'
        PAUSE
      {% endif %}
    {% endif %}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=FILAMENT_WATCHDOG DURATION=0.5


########################################
# IDEX MACROS

# activate extruder
[gcode_macro T0]
gcode:
    {% if printer.toolhead.extruder == 'extruder1' %}
      PARK
      ACTIVATE_EXTRUDER EXTRUDER=extruder
      SET_DUAL_CARRIAGE CARRIAGE=0
      UNPARK
      SET_GCODE_OFFSET Y=0
    {% endif %}
[gcode_macro T1]
gcode:
    {% if printer.toolhead.extruder == 'extruder' %}
      PARK
      ACTIVATE_EXTRUDER EXTRUDER=extruder1
      SET_DUAL_CARRIAGE CARRIAGE=1
      UNPARK
      SET_GCODE_OFFSET Y=2
    {% endif %}

# park active extruder
[gcode_macro PARK]
variable_park_x: 0
variable_park_y: 0
gcode:
    SAVE_GCODE_STATE NAME=park_state
    SET_GCODE_VARIABLE MACRO=PARK VARIABLE=park_x VALUE={printer.toolhead.position.x}
    SET_GCODE_VARIABLE MACRO=PARK VARIABLE=park_y VALUE={printer.toolhead.position.y}
    G91
    G1 Z2 F360
    G90
    {% if printer.toolhead.extruder == 'extruder' %}
      G1 X-58 F18000 # T0_MIN
    {% else %}
      G1 X455.8 F18000 # T1_MAX
    {% endif %}
    RESTORE_GCODE_STATE NAME=park_state

# unpark active extruder
[gcode_macro UNPARK]
gcode:
    SAVE_GCODE_STATE NAME=park_state
    G90
    {% if printer["gcode_macro PARK"].park_x > 0 and printer["gcode_macro PARK"].park_x < 397.8 %} # T1_MIN < park_x < T0_MAX
      G1 X{printer["gcode_macro PARK"].park_x} Y{printer["gcode_macro PARK"].park_y} F18000
    {% endif %}
    G91
    G1 Z-2 F360
    RESTORE_GCODE_STATE NAME=park_state

# activate special modes
[gcode_macro ACTIVATE_COPY_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X0 F18000
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X198.9 F18000 # CENTER_X
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
[gcode_macro ACTIVATE_MIRROR_MODE]
gcode:
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G1 X0 F18000
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G1 X397.8 F18000 # BED_WIDTH
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

########################################
# START/STOP MACROS

# start printing
[gcode_macro PRINT_START]
gcode:

  ; initialize klipper
  CLEAR_PAUSE
  SET_PAUSE_NEXT_LAYER ENABLE=0 
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  M220 S100 ; feed rate to 100%
  M221 S100 ; flow rate to 100%
  
  ; disable unused filament sensors
  {% if params.T0_USED == "true" %} 
    SET_FILAMENT_SENSOR SENSOR=switch_sensor  ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
  {% else %}
    SET_FILAMENT_SENSOR SENSOR=switch_sensor  ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
  {% endif %}
  {% if params.T1_USED == "true" %} 
    SET_FILAMENT_SENSOR SENSOR=switch_sensor1  ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor1 ENABLE=1
  {% else %}
    SET_FILAMENT_SENSOR SENSOR=switch_sensor1  ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor1 ENABLE=0
  {% endif %}
  
  ; initialize position
  G90 ; absolute XYZ moves
  M83 ; relative E moves
  G28 ; home all axes
  T0
  SET_GCODE_OFFSET Z=0
  STABLE_Z_HOME
  PARK
  
  ; start preheat extruders and bed
  {% if params.T0_USED == "true" %} M104 T0 S{params.T0_TEMP|int-50} {% endif %}
  {% if params.T1_USED == "true" %} M104 T1 S{params.T1_TEMP|int-50} {% endif %}
  ; heat bed
  {% set BED_TEMP = 0 %}
  {% if params.T0_USED == "true" and params.T0_BED|int > BED_TEMP %} {% set BED_TEMP = params.T0_BED|int %} {% endif %}
  {% if params.T1_USED == "true" and params.T1_BED|int > BED_TEMP %} {% set BED_TEMP = params.T1_BED|int %} {% endif %}
  M190 S{BED_TEMP}
  ; finish preheat extruders
  {% if params.T0_USED == "true" %} M109 T0 S{params.T0_TEMP|int-50} {% endif %}
  {% if params.T1_USED == "true" %} M109 T1 S{params.T1_TEMP|int-50} {% endif %}
  
  ; z homing and mesh leveling
  UNPARK
  BED_MESH_CLEAR
  BED_MESH_CALIBRATE PROFILE=current ADAPTIVE=1 ADAPTIVE_MARGIN=5
  BED_MESH_PROFILE SAVE=current
  BED_MESH_PROFILE LOAD=current
  SET_GCODE_OFFSET Z={(-0.35)*params.LAYER|float}
  PARK
  
  ; finish heating extruders
  {% if params.T0_USED == "true" %} M104 T0 S{params.T0_TEMP|int} {% endif %}
  {% if params.T1_USED == "true" %} M104 T1 S{params.T1_TEMP|int} {% endif %}
  {% if params.T0_USED == "true" %} M109 T0 S{params.T0_TEMP|int} {% endif %}
  {% if params.T1_USED == "true" %} M109 T1 S{params.T1_TEMP|int} {% endif %}
  
  ; check filament presence
  {% if params.T0_USED == "true" and printer["filament_switch_sensor switch_sensor"].filament_detected == false %}
    SET_GCODE_VARIABLE MACRO=FILAMENT_RUNOUT VARIABLE=t0_runout VALUE=-1e8
  {% endif %}
  {% if params.T1_USED == "true" and printer["filament_switch_sensor switch_sensor1"].filament_detected == false %}
    SET_GCODE_VARIABLE MACRO=FILAMENT_RUNOUT VARIABLE=t0_runout VALUE=-1e8
  {% endif %}
  
  ; finalize state
  UNPARK
  T{params.TOOL}

# stop printing
[gcode_macro PRINT_END]
gcode:
  TURN_OFF_HEATERS
  PARK
  T0

# mainsail PAUSE/UNPAUSE behaviour
[gcode_macro _CLIENT_VARIABLE]
variable_user_pause_macro  : "PARK"
variable_user_cancel_macro : "PARK"
variable_user_resume_macro : "UNPARK"
gcode:
# disable mainsail default park gcode
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
gcode:

